# -*- coding: utf-8 -*-
"""curve_filter.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tV_WfXTdbnb7G2yoRTatMU3GPmUbdFJJ
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import cv2
from scipy.interpolate import UnivariateSpline
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
# %matplotlib inline

from google.colab import files
uploaded = files.upload

path = 'sample1.jpg'

img = mpimg.imread(path)

plt.rcParams['figure.figsize'] = [18,15]
plt.imshow(img)

#create mapping function

def mapping_function(x, y):
  spl = UnivariateSpline(x, y)
  return spl(range(256))

def apply_warm(image):
  increase = mapping_function([0, 64, 128, 192, 256],[0, 70, 140, 210, 256])
  decrease = mapping_function([0, 64, 128, 192, 256],[0, 40,  90, 150, 256])
  red, green, blue = cv2.split(image)
  red = cv2.LUT(red, increase).astype(np.uint8)
  blue = cv2.LUT(blue, decrease).astype(np.uint8)
  image = cv2.merge((red, green, blue))
  return image

def apply_cool(image):
  increase = mapping_function([0, 64, 128, 192, 256],[0, 70, 140, 210, 256])
  decrease = mapping_function([0, 64, 128, 192, 256],[0, 40,  90, 150, 256])
  red, green, blue = cv2.split(image)
  red = cv2.LUT(red, decrease).astype(np.uint8)
  blue = cv2.LUT(blue, increase).astype(np.uint8)
  image = cv2.merge((red, green, blue))
  return image

gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
plt.imshow(gray)

new_image = apply_cool(img)
plt.imshow(new_image)

from ipywidgets import interact, interactive, fixed
import ipywidgets as widgets

def choice(x,img):
  if x == 'Warm':
    return plt.imshow(apply_warm(img))
  if x == 'Cool':
    return plt.imshow(apply_cool(img))
  if x == 'Negative':
    return plt.imshow(gray)
  if x == 'No Filter':
    return plt.imshow(img)

interact(choice, x= widgets.Dropdown(options=['No Filter','Warm','Cool','Negative'], description='Filter'), img =fixed(img))

